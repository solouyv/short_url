[tool:pytest]
rootdir = .
cache_dir = /tmp/test_cache/.pytest_cache

filterwarnings =
    ignore::UserWarning
    ignore::FutureWarning
    ignore::DeprecationWarning

[flake8]
ignore=
    WPS306, # Class without a base class

    WPS305  # Found `f` string

    D,      # Remove all docstring rules

    Q000,   # Remove bad quotes

    WPS464, # Found empty comment

    WPS300, # Found local folder import

    WPS412, # Found `__init__.py` module with logic

    WPS500, # Found `else` in a loop without `break`

    WPS111, # Found too short name: x

    WPS231, # Found function with too much cognitive complexity NEED TO GOOGLE AND SET COGNITIVE

    WPS509, # Found incorrectly nested ternary

    WPS235, # Found too many imported names from a module

    WPS226, # Found string constant over-use

    WPS348, # Found a line that starts with a dot

    WPS337, # Found multiline conditions

    WPS201, # Found module with too many imports

    WPS602, # Found using `@staticmethod`

    S501,   # Requests call with verify=False disabling SSL certificate checks, security issue

    WPS229, # Found too long ``try`` body length

    W503    # line break before binary operator

    WPS237  # Found a too complex `f` string

    WPS463  # Found a getter without a return value

    WPS600  # Found subclassing a builtin: str

    B008    # Do not perform function calls in argument defaults. This rule prevents us from using the recommended style of dependency_injector

    WPS211  # Found too many arguments

    WPS404  # Found complex default value

    WPS431  # Found nested class: Config

    WPS213  # Found too many expressions

    WPS115  # Found upper-case constant in a class

    WPS453  # Found executable mismatch: file is executable but no shebang is present

    WPS420  # Found wrong keyword: pass

    C812    # Missing trailing comma

    WPS430 # Nested function

    WPS411 # Empty module

allowed-domain-names =
    value,  # We allow using 'value' name when creating dictionaries
    file,   # We are working with files
    data,   # We use name 'data' in our models
    info    # We use it in settings

exclude =
    .git,
    __pycache__,
    tests,

per-file-ignores =
  # There are multiple `assert`s in tests, we allow them:
  src/tests/*.py: S101
  */__init__.py: F401
  ./short_url/domain/interfaces/*.py: WPS428 F401
  ./short_url/error_handlers.py: WPS430
  # Found nested import for sentry
  ./short_url/app.py: WPS433
  ./short_url/containers.py: WPS202

max-local-variables = 15
max-methods = 20
max-line-length = 130
max-module-members = 10
max-module-expressions = 10
max-line-complexity = 16

# radon section
radon-max-cc = 10
radon-show-closures = True
radon-no-assert = True

# to disable false positive N805
classmethod-decorators =
    classmethod
    validator
    root_validator

[mypy]
ignore_missing_imports = True
follow_imports = skip
follow_imports_for_stubs = False
cache_dir = /tmp/test_cache/.mypy_cache
strict_optional = False
exclude = (?x)(
    ^short_url/__main__.py$
          )
[black]
line-length = 130
target-version = ['py39']

[isort]
profile = black
multi_line_output = 3

[coverage:run]
omit =
    tests/*
    */__init__.py
    /opt/*
    short_url/domain/interfaces/*
branch = True
data_file=/tmp/test_cache/.coverage

[coverage:report]
fail_under = 85
